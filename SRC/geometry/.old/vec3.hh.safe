#ifndef VEC3_HH
#define VEC3_HH

#include "constant.hh"

class vec3
{
	private:
		double value[3];
	
	public:
		vec3();
		vec3(const double&, const double&, const double&);
		vec3(const vec3&);
		
		double& x();
		double& y();
		double& z();
		const double& x() const;
		const double& y() const;
		const double& z() const;
	
	
		double aire(const vec3&, const vec3&) const;
		sens orientation(const vec3&, const vec3&) const;
	
		
		vec3& operator+= (const vec3&);
		vec3& operator-= (const vec3&);
		vec3& operator*= (double);
		vec3& operator/= (double);
	
	
		
};


inline vec3& vec3::operator+= (const vec3& v)
{
  x() += v.x();
	y() += v.y();
	z() += v.z();
  return *this;
}
inline vec3& vec3::operator-= (const vec3& v)
{
  x() -= v.x();
	y() -= v.y();
	z() -= v.z();
  return *this;
}

inline vec3& vec3::operator*= (double a)
{
  x() *= a;
	y() *= a;
	z() *= a;
  return *this;
}
inline vec3& vec3::operator/= (double a)
{
  x() /= a;
	y() /= a;
	z() /= a;
  return *this;
}



#endif